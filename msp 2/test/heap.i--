/*
 * Modelling a heap in C-- / MSP
 *
 */

#define HEAP_SIZE 10

char      heap[HEAP_SIZE];  /* The heap as a static array                    */
int  heapIndex[HEAP_SIZE];  /* The auxiliar array with indexes "pointing" to *
                             *   the new position available in the heap      */

int      freeIndex;    /* Index of the first position available position */

main() : int           // Main function
{
  char a ;             
  char b ;
  char c ;
  char d ;
  char e ; 
  char nl;

  nl = 10;

  init_heap();

  a = ler_lista();

  b = ler_lista();

  show_lista(a);  

  print nl;

  print head(a);

  print nl;

  show_lista (tail(a));

  free_lista(a);

  c = ler_lista();
  
  show_lista(c);    

/*
  d = concat_lista (c,b);

  show_lista(d);
*/

  print elem(71,c);
};


/* Heap initialization.                                                     *
 * Every position in the heapIndex points to the next one. That is, points  *
 * to the next available position. The value -1 is use to define the en of  *
 * the heap.                                                                *
 *                                                                          */

init_heap() : int 
{ int i;
  i = 1;

  freeIndex = 1;                            /* first available position */
  while ( i < HEAP_SIZE )
   { heapIndex[i] = i + 1;
     i = i + 1 ;
   };
  heapIndex[i] = -1 ;                       /* End of the  heap */
};


cons_lista(int a , int l) : int
{
  int aux ;

  if ( freeIndex == -1 ) then 
    { cons_lista = l; }
  else
    { aux       = freeIndex;             /* aux points to the 1st free pos   */
      freeIndex = heapIndex[freeIndex];  /* the next 1st free pos is the     *
                                          * index pointed by the heapIndex   *
                                          * in the pos of the used freeIndex */

      heap[aux]      = a;       /* cons the element:                         */
                                /*   - The heap in pos aux gets the value a  */
      heapIndex[aux] = l ;      /*   - The index associated with the value   */
                                /*     points to the list                    */
      cons_lista = aux ;
    };
};


show_lista(int l) : int
{ int i ;
  i = l ;
  while (heapIndex[i] > 0)
   { print heap[i];
     i = heapIndex[i];
   };
};


free_lista(int l) : int
{  int i ;
   int aux ;

   i = l;
   while (heapIndex[i] > 0)
    { heap[i] = 0 ;
      aux     = i ;
      i       = heapIndex[i];
    };
   
   heapIndex[aux] = freeIndex ;
   freeIndex      = l;
};

/*
concat_lista (int la , int lb) : int    // List concatenation
{ int i;
  int aux ;

  i = la;
  while  (heapIndex[i] > 0)
    { aux     = i ;
      i       = heapIndex[i];
    };
  heapIndex[aux] = lb;
 
  concat_lista = la;
};
*/

head(int l) : int
{ head = heap[l]; 
};


tail(int l) : int
{ tail = heapIndex[l];
};


elem (int e , int l) : int
{ if (l == -1) then 
    { elem = 0; }
  else
    { if ( e == head(l)) then 
        { elem = 1 ; }
      else
        { elem = elem(e,tail(l)); };
    };
};


ler_lista() : int
{ char c;
  int  l;
  l = -1;
  input c;
  while (c > 0)
   { l = cons_lista(c,l);
     input c;
   };
  ler_lista = l  ;
};
